# 2.1 Повторяем основные конструкции
""""""

"""
На easy
"""
a, b = int(input()), int(input())
print(a + b)
print(a - b)
print(a * b)
print(a / b)
print(a // b)
print(a % b)
print((a ** 10 + b ** 10) ** 0.5)

"""
Индекс массы тела
"""
m, h = float(input()), float(input())
imb = m / h ** 2
if imb < 18.5:
    rez = "Недостаточная масса"
elif 18.5 <= imb <= 25:
    rez = "Оптимальная масса"
else:
    rez = "Избыточная масса"
print(rez)


"""
Стоимость строки
Дана строка текста. Напишите программу для подсчета стоимости строки, 
исходя из того, что один любой символ (в том числе пробел) стоит 60 копеек. 
Ответ дайте в рублях и копейках в соответствии с примерами.
Input:  Привет, как дела?!
Output: 10 р. 80 коп.
"""
# s = "Привет, как дела?!"
s = input()
rez = len(s) * 60
rub = rez // 100
k = rez % 100
print(f"{rub} р. {k} коп.")


"""
Количество слов
Дана строка, состоящая из слов, разделенных пробелами. 
Напишите программу, которая подсчитывает количество слов в этой строке.
Input:  Hello world
Output: 2
"""
s = input()
rez = len(s.split())
print(rez)

# Короче
print(len(input().split()))

"""
Китайский гороскоп назначает животным годы в 12-летнем цикле. 
Один 12-летний цикл показан в таблице ниже. 
Таким образом, 2012 год будет очередным годом дракона.
Напишите программу, которая считывает год и отображает название связанного с ним животного. 
Программа должна корректно работать с любым годом
2000	Дракон
2001	Змея
2002	Лошадь
2003	Овца
2004	Обезьяна
2005	Петух
2006	Собака
2007	Свинья
2008	Крыса
2009	Бык
2010	Тигр
2011	Заяц
Input:  2020
Output: Крыса
"""
zodiac = ["Обезьяна", "Петух", "Собака", "Свинья", "Крыса", "Бык", "Тигр", "Заяц", "Дракон", "Змея", "Лошадь", "Овца"]
year = int(input())
rez = zodiac[year % 12]
print(rez)


"""
Дано пятизначное или шестизначное натуральное число. 
Напишите программу, которая изменит порядок его последних пяти цифр на обратный.
На вход программе подается одно натуральное пятизначное или шестизначное число.
Число нужно выводить без незначащих нулей.
Input:  12345
Output: 54321

Input:  25000
Output: 52

Input:  560000
Output: 500006
"""
str_num = input()
if len(str_num) == 5:
    revers = str_num[::-1].lstrip("0")
    print(revers)
elif len(str_num) == 6:
    revers = str_num[0] + str_num[1:][::-1]
    print(revers)


# Короче
str_num = input()
# При переводе в int() функция отбрасывает незначащие нули (в начале строки)
revers = int(str_num[:-5] + str_num[-5:][::-1])
# revers = int(str_num[:-5] + str_num[:-6:-1])
print(revers)


"""
На вход программе подаётся натуральное число (0 < n < 10^100). 
Напишите программу, которая вставляет в заданное число запятые 
в соответствии со стандартным американским соглашением о запятых в больших числах.

Input:  1000000
Output: 1,000,000

Input:  12345
Output: 12,345
"""
num = int(input())
ls_num = []

while num:
    ls_num.append(str(num)[-3:])
    num //= 1000

ls_num.reverse()
rez = ','.join(ls_num)

print(rez)


# Вариант
num = int(input())
rez = '{:,}'.format(num)
print(rez)

# Вариант
num = input()
for idx in range(len(num) - 3, 0, -3):
    num = num[:idx] + ',' + num[idx:]
print(num)


"""
https://stepik.org/lesson/415553/step/10?unit=405082
n человек, пронумерованных числами от 1 до n, стоят в кругу. 
Они начинают считаться, каждый k-й по счету человек выбывает из круга, 
после чего счет продолжается со следующего за ним человека. 
Напишите программу, определяющую номер человека, который останется в кругу последним.
На вход программе подаются два числа n и k, записанные на отдельных строках.
Программа должна вывести одно число – номер человека, который останется в кругу последним.
https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_%D0%98%D0%BE%D1%81%D0%B8%D1%84%D0%B0_%D0%A4%D0%BB%D0%B0%D0%B2%D0%B8%D1%8F
https://www.geogebra.org/m/ExvvrBbR
Input:   2
         1
Output:  2

Input:   5
         2
Output:  3
"""
# Вариант
n, k = int(input()), int(input())
people = [item for item in range(1, n + 1)]
current_idx = 0

while len(people) > 1:
    current_idx = (current_idx + k - 1) % len(people)
    del people[current_idx]

print(people[0])

# Вариант
n = int(input())
k = int(input())
alive = [i for i in range(1, n + 1)]  # список всех человек в кругу
counter = 0  # счетчик выбывающего из круга
while len(alive) > 1:  # цикл пока кол-во человек в кругу больше 1
    counter = (counter + k - 1) % n  # определение индекса человека который выбывает из круга
    alive.pop(counter)  # удаление этого индекса из списка человек в кругу
    n -= 1  # уменьшение списка на 1 выбывшего
print(alive[0])  # Длина списка становится равной 1 человеку. У него будет нулевой индекс. Он и будет последним


# Вариант преподавателя
n = int(input())
k = int(input())

res = 0
for i in range(1, n + 1):
    res = (res + k) % i
print(res + 1)
